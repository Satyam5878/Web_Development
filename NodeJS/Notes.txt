$ Date 26/05/2018:

What is NodeJS?
    Javascript Runtime: allows to run js in computer server
    Built on chrome V8 Javascript Engine
    
    event driven and non blocking model
    npm packages

Capabilities:
    read, delete and update files
    communicate to databases
    
Popular?
    uses JS
    fast
    great for real time services
    
websockets


Learnings:
    Inner working of NodeJS:
        V8 Engine
        Modules
        Event Emmitter
        The file System
        
    Creating a web server:
        Routing 
        Express
        Templating
    Creating a Node Application:
    
    
Node.js is written in C++
V8 engine convertes js code to machine code

            JS
            |
    __________________
   |C++  Node.js  V8  |
   --------------------
            |
        Machine Code
        
        


Global Object:

    In client side : Window is the global object
     
    Methods like : alert, scroll, settimeout, setInterval, clearInterval, 
    
    But in Node: global object is "global"
    
    __dirname, __fileaname
    
Modules and require and exports:
    Modules: js file for particular set of tasks
    require and exports: help to use module 


Normal Function:
    function name(){};
Function Expression:
    var func_name = function(){};
Passing function to another funtion as argument:
    some_function(passing_function(){
        
    })
    
    
$ Date 28/05/2018:
template string:
    `some string ${some expression}`
    


core inbuilt modules of nodejs
Event Module:
    event emitter: 
        defined in event module
        can be use to define custom event and react to those events
    
    
Util module:
    
FS module:    
    
callback function
constructor
forEach function of array object



Reading amd writing files:
    readFileSync
    writeFileSync
    readFile
    writeFile
    unlink: to delete file
    
Date 29/05/2018:
Creating and removing directories:
    Syncronusly:
        mkdirSync
        rmdirSync
    Asynchronously:
        mkdir
        rmdir
        
Client and server:

   ________                               ________
  | Client |    ------Request------>     | Server |
  ----------                             ----------
                <-----Response------
                
    server and client have protocols to communicate with each other
    protocol: Http, Ftp
    
    Socket: Channel with which information can be sent
    
Creating a server:
    http module
    http.createServer
    server.listen()
    
    response object:
        
    request object:
        req.writeHead()
        req.write()
        req.end()
        
    
Streams and buffers:
    Buffers: 
        temporary storage for data
    Streams:
        chunk of data flowing
        Readable stream:
            fs.createReadableStream
        Writable Stream:
        Duplex Stream:
        
    
    increases the performance of the application
    
    
    
    
  Date 29/06/2018:

Creating Web Server:
    https module
    http.CreateServer(function(req, res))
        
    
#Module List:
    http
    fs
    

# Date 05/06/2018:
    

Reading and Writing Streams:
    fs.createReadStream
    fs.creatWriteStream

    sending data using buffers and stream

Pipes:
    used for sending data.
    pipe takes data from readable stream and pipes it to writable stream.   

    readStream.pipe(writeStream);

    the way you send the the plain text, we can also send the html content.

    it increases the performance of the sending and receiving.

Serving HTML Pages to Client:
    content-type: text/html.


$ Date 
Serving JSON data to client:

    change Content-Type- application/JSON
    res.write method expects string or buffer objects.

    why you will return json data:
        this can be requested by js code.
        might be the api end point.


Basic Routing:
    req.url property gives the url we are calling for.
    for basic routing we can use if else condition to route based on the url.
    we can send html or json or anything depending upon the request.

    Express package for routing.

Node package manager(npm):
    node packages help to perform certain type to task within nodejs.
    e.g.
        Express: Routing and Templating.

    www.npmjs.com


Package.json:
    file.
    helps to keep track of packages used in the project.

    npm install express -save: -save flags makes an entry in the package.json file.

    npm insatll: will look for package.json file and install all the mmodules listed as dependencies.

Nodemon package:
    it basically listens to any changes to file and automatically reloades the server.

    instead of running the application using node we run as, nodemon Test.js

         

   from here switch to express JS.           
   


        



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    